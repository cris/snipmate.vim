snippet main
	public static void main(String [] args) {
		${1:/* code */}
	}
snippet pln
	System.out.println(${1:params});
snippet plns
	System.out.println("${1:string}"${2});
snippet b
	boolean 
snippet i
	int 
snippet s
	String 
snippet f
	false
snippet t
	true
snippet n
	null
snippet S
	String 
snippet pu
	public 
snippet po
	protected 
snippet pr
	private 
snippet st
	static 
snippet fi
	final 
snippet ab
	abstract 
snippet @O
	@Override
	${1}
snippet puc
	public class ${1:`Filename("", "untitled")`} ${2}{
		${3}
	}
snippet v
	void 
snippet puv
	public void 
snippet prv
	private void 
snippet pov
	protected void 
snippet pus
	public static 
snippet prs
	private static 
snippet pos
	protected static 
snippet puf
	public final 
snippet prf
	private final 
snippet pof
	protected final 
snippet pusf
	public static final 
snippet prsf
	private static final 
snippet posf
	protected static final 
snippet re;
	return;
snippet re
	return ${1:code};
snippet ret
	return true;
snippet ref
	return false;
snippet br
	break;
snippet de
	default:
		${1}
snippet ca
	catch(${1:Exception} ${2:e}) ${3}
snippet th
	throw 
snippet sy
	synchronized
snippet im
	import
snippet imp
	implements
snippet ext
	extends 
snippet j.u
	java.util
snippet j.i
	java.io.
snippet j.b
	java.beans.
snippet j.n
	java.net.
snippet j.m
	java.math.
snippet ifi
	if (${1}) ${2};
snippet if
	if (${1}) {
		${2}
	}
snippet el
	else {
		${1}
	}
snippet elif
	else if (${1}) ${2}
snippet wh
	while (${1}) ${2}
snippet for
	for (${1}; ${2}; ${3}) {
		${4}
	}
snippet fori
	for (int ${1:i} = 0; $1 < ${2:count}; $1++) {
		${3}
	}
snippet fore
	for (${1} : ${2}) {
		${3}
	}
snippet sw
	switch (${1}) {
		${2}
	}
snippet cs
	case ${1}:
		${2}
snippet tc
	public class ${1:`Filename()`} extends ${2:TestCase}
#snippet t
#	public void test${1:Name}() throws Exception ${2}
snippet cl
	class ${1:`Filename("", "untitled")`} ${2}
snippet in
	interface ${1:`Filename("", "untitled")`} ${2:extends Parent}${3}
snippet m
	${1:void} ${2:method}(${3}) ${4:throws }${5}
#snippet v
#	${1:String} ${2:var}${3: = null}${4};${5}
snippet co
	static public final ${1:String} ${2:var} = ${3};${4}
snippet cos
	static public final String ${1:var} = "${2}";${3}
snippet as
	assert ${1:test} : "${2:Failure message}";${3}
snippet try
	try {
		${3}
	} catch(${1:Exception} ${2:e}) {
	}
snippet tryf
	try {
		${3}
	} catch(${1:Exception} ${2:e}) {
	} finally {
	}
snippet rst
	ResultSet ${1:rst}${2: = null}${3};${4}
# Android snippets
snippet ima
	import android.${1:package.class};
snippet imaa
	import android.app.${1:Activity}${2};
snippet imav
	import android.view.${1:View}${2};
snippet imac
	import android.content.${1:Context}${2};
snippet imao
	import android.os.${1:Bundle}${2};
snippet imau
	import android.util.${1:Log}${2};
snippet imaw
	import android.widget.${1:TextView}${2};
snippet loe
	Log.e(TAG, "${1:message}"${2});
snippet low
	Log.w(TAG, "${1:message}"${2});
snippet loi
	Log.i(TAG, "${1:message}"${2});
snippet lod
	Log.d(TAG, "${1:message}"${2});
